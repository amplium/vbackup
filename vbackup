#!/bin/sh

set -e
set -u
set -o errexit

VBACKUP_IMAGE="${VBACKUP_IMAGE:-docker.io/ubuntu:22.04}"
VBACKUP_RUNTIME="${VBACKUP_RUNTIME:-docker}"
E="$(printf '\033')"

usage() {
	cat <<EOF
Docker Volume Backup. Backup commands for container volume backup and
restoration.

Usage:
  vbackup [-v|--verbose] <subcommand> <subcommand-arguments>

Subcommands:
  help   Show this help screen
  export Make a copy of a container volume to a tarball
  import Restore a container volume from a tarball

Examples:
  Create a tarball from a volume
  ❯ vbackup export <VOLUME> <FILE>

  Create a tarball of all volumes
  ❯ vbackup export-all <CONTAINER> <FILE>

  Extract a tarball into a volume
  ❯ vbackup import <VOLUME> <FILE>

  Extract a tarball into volumes of a container
  ❯ vbackup import-all <CONTAINER> <FILE>

EOF
}

ensure_args () {
	if [ -z "${1}" ] || [ -z "${2}" ]
	then
		usage
		error 'Not enough arguments' 1>&2
		exit 1
	fi
}

ensure_file_exists () {
	if [ ! -f "${1}" ]
	then
		error "error: '${1}' no such file or directory"
		exit 1
	fi
}

ensure_file_not_exists () {
	if [ -f "${1}" ]
	then
		error "error: '${1}' already exists"
		exit 1
	fi
}

has_volume () {
	"${VBACKUP_RUNTIME}" volume inspect --format '{{.Name}}' "${1}" > /dev/null 2>&1
}

get_volumes () {
	"${VBACKUP_RUNTIME}" inspect \
				--type container \
				-f '{{range .Mounts}}{{printf "%v\x00" .Destination}}{{end}}' \
			"${1}" \
		| head -c -1 \
		| sort -uz
}

error () {
	printf '%b%s%b\n' "${E}[31m" "${1}" "${E}[0m"
}

warn () {
	printf '%b%s%b\n' "${E}[33m" "${1}" "${E}[0m"
}

cmd_export() {
	ensure_args "${@}"
	ensure_file_not_exists "${2}"

	volume_name="${1}"
	file_name="$(readlink -f "${2}")"

	if ! has_volume "${volume_name}"
	then
		error "error: volume ${volume_name} does not exist"
		exit 1
	fi

	touch -- "${file_name}"
	tempdir="$(mktemp -dup /)"

	"${VBACKUP_RUNTIME}" run --rm \
			-e LC_ALL=C.UTF-8 \
			-v "${volume_name}":/vbackup-volume \
			-v "${file_name}:/${tempdir}/${file_name##*/}" \
		"${VBACKUP_IMAGE}" \
			tar -c -a "${VERBOSE}" -f "/${tempdir}/${file_name##*/}" /vbackup-volume
}

cmd_import () {
	ensure_args "${@}"
	ensure_file_exists "${2}"

	volume_name="${1}"
	file_name="$(readlink -f "${2}")"

	if ! has_volume "${volume_name}"
	then
		warn "warning: volume ${volume_name} does not exist"
		"${VBACKUP_RUNTIME}" volume create "${volume_name}"
	fi

	tempdir="$(mktemp -dup /)"

	"${VBACKUP_RUNTIME}" run --rm \
			-v "${volume_name}":/vbackup-volume \
			-v "${file_name}:/${tempdir}/${file_name##*/}" \
		"${VBACKUP_IMAGE}" \
			tar -xp "${VERBOSE}" -S -f "/${tempdir}/${file_name##*/}" --overwrite vbackup-volume
}

cmd_export_all () {
	ensure_args "${@}"
	ensure_file_not_exists "${2}"

	container="${1}"
	file_name="$(readlink -f "${2}")"

	touch -- "${file_name}"
	tempdir="$(mktemp -du -p /)"

	get_volumes "${1}" \
		| "${VBACKUP_RUNTIME}" run \
				--rm -i --volumes-from "${container}" \
				-e LC_ALL=C.UTF-8 \
				-v "${file_name}:/${tempdir}/${file_name##*/}" \
			"${VBACKUP_IMAGE}" \
				tar -c -a "${VERBOSE}" --null -T- -f "/${tempdir}/${file_name##*/}"
}

cmd_import_all () {
	ensure_args "${@}"
	ensure_file_exists "${2}"

	container="${1}"
	file_name="$(readlink -f "${2}")"
	tempdir="$(mktemp -du -p /)"

	"${VBACKUP_RUNTIME}" run --rm --volumes-from "${container}" \
			-e LC_ALL=C.UTF-8 \
			-v "${file_name}:/${tempdir}/${file_name##*/}:ro" \
		"${VBACKUP_IMAGE}" \
			tar -xp "${VERBOSE}" -S -f "/${tempdir}/${file_name##*/}" -C / --overwrite
}

if [ "${1:-x}" = '-v' ] || [ "${1:-x}" = '--verbose' ]
then
	VERBOSE='-v'
	shift
else
	VERBOSE=''
fi

case "${1:-help}" in
	export)     shift ; cmd_export     "${@}" ;;
	import)     shift ; cmd_import     "${@}" ;;
	export-all) shift ; cmd_export_all "${@}" ;;
	import-all) shift ; cmd_import_all "${@}" ;;
	help)       usage ;;
	*)
		usage
		error "Unrecognized command '${1}'"
		exit 1
		;;
esac
